/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/app-scripts/front-common.js":
/*!**************************************************!*\
  !*** ./resources/js/app-scripts/front-common.js ***!
  \**************************************************/
/***/ (() => {

eval("var FINALDISCOUNTCOST = 0;\n\nvar frontCommon = function frontCommon() {\n  // Ajax header declared\n  $.ajaxSetup({\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    }\n  });\n\n  var tostrMessage = function tostrMessage(type, message) {\n    toastr.options = {\n      closeButton: true,\n      progressBar: true,\n      showMethod: 'slideDown' // timeOut: 4000\n\n    };\n\n    if (type != '' && message != '') {\n      if (type == 'success') {\n        toastr.success(message);\n      } else {\n        toastr.error(message);\n      }\n    }\n  };\n\n  var convertFileToBase64 = function convertFileToBase64(file) {\n    return new Promise(function (resolve, reject) {\n      var reader = new FileReader();\n      reader.readAsDataURL(file);\n\n      reader.onload = function () {\n        return resolve(reader.result);\n      };\n\n      reader.onerror = reject;\n    });\n  }; // Ajax function to update model data based on selected brand\n\n\n  var getModels = function getModels(url, type, modelId) {\n    $.ajax({\n      url: url,\n      type: \"GET\",\n      success: function success(response) {\n        $(modelId).empty();\n\n        if (type == 'dropdown') {\n          $(modelId).parent().find('.dropdown-toggle-label').text('');\n          $(modelId).parent().find('.dropdown-toggle-label').text('Model');\n          $.each(response, function (key, val) {\n            $(modelId).append('<li><a class=\"dropdown-item model-dropdown\" href=\"javascript:;\"><span class=\"dropdown-item-label\">' + val + '</span></a></li>');\n          });\n        } else {\n          $(modelId).append('<option value=\"\" disabled selected>Any model</option>');\n          $.each(response, function (key, val) {\n            $(modelId).append('<option value=' + key + '>' + val + '</option>');\n          });\n        }\n      }\n    });\n  }; // Selected Plan Submit\n\n\n  $(document).on('click', '.submit-plan', function (event) {\n    event.preventDefault();\n    $('.select_addOn').remove();\n\n    if ($('.addOn-check:checked').length > 0) {\n      $('.addOn-check:checked').each(function (index, elem) {\n        var addonUuid = $(this).data('addon-uuid');\n        var newElement = \"<input class=\\\"select_addOn\\\" name=\\\"selected_addOn\".concat(index + 1, \"\\\" type=\\\"hidden\\\" value=\\\"\").concat(addonUuid, \"\\\">\");\n        $(newElement).insertBefore('.planForm-last');\n      });\n    }\n\n    $('#planForm').submit();\n  });\n  $(document).on('change', 'select[id=\"selectBrand\"]', function () {\n    var brand_uuid = $(this).find(\"option:selected\").val();\n    var elem = $('#boatModel');\n    $.ajax({\n      url: base_url + '/get-brand-models/' + brand_uuid,\n      type: \"GET\",\n      beforeSend: function beforeSend() {\n        elem.attr('disabled', 'disabled');\n      },\n      complete: function complete() {\n        elem.removeAttr(\"disabled\");\n      },\n      success: function success(response) {\n        elem.html('');\n        elem.append(\"<option value=\\\"\\\" selected disabled>-- Select Your Model --</option>\");\n        $.each(response.models, function (key, model) {\n          elem.append(\"\\n\\t\\t\\t\\t\\t\\t\\t<option value=\\\"\".concat(model.model_name, \"\\\">\").concat(model.model_name, \"</option>\\n\\t\\t\\t\\t\\t\\t\"));\n        });\n      }\n    });\n  });\n  $(document).on('change', '.filter', function () {\n    $('#filterForm').submit();\n  }); // Select 2 for step one model dropdown\n\n  $(\"#selectBrand\").select2({\n    tags: true,\n    createTag: function createTag(params) {\n      return null;\n    }\n  }); // Select 2 for step one model dropdown\n\n  $(\"#boatModel\").select2({\n    tags: true\n  }); // Select 2 for step four states dropdown\n\n  $(\"#State\").select2({\n    tags: true\n  }); // Select 2 for step four states dropdown\n\n  $(\"#userProfileStateSelect\").select2({\n    tags: true,\n    createTag: function createTag(params) {\n      return null;\n    }\n  }); // Select 2 for livewire for boat listings\n  // $(\".livewire-boat-sidebar-model\").select2({\n  //     tags: true\n  // });\n\n  $('form[id=\"stepTwoForm\"]').validate({\n    errorElement: \"span\",\n    rules: {\n      fuel_capacity: \"required\",\n      hull_material: \"required\",\n      hull_id: {\n        minlength: 12\n      },\n      anchor_type: {\n        required: {\n          depends: function depends(element) {\n            return $('#anchorCheck').is(':checked');\n          }\n        }\n      },\n      generator_fuel_type: {\n        required: {\n          depends: function depends(element) {\n            return $('#generatorCheck').is(':checked');\n          }\n        }\n      },\n      generator_size: {\n        required: {\n          depends: function depends(element) {\n            return $('#generatorCheck').is(':checked');\n          }\n        }\n      },\n      generator_hours: {\n        required: {\n          depends: function depends(element) {\n            return $('#generatorCheck').is(':checked');\n          }\n        }\n      },\n      cabin_berths: {\n        required: {\n          depends: function depends(element) {\n            return $('#cabinCheck').is(':checked');\n          }\n        }\n      },\n      cabin_description: {\n        required: {\n          depends: function depends(element) {\n            return $('#cabinCheck').is(':checked');\n          }\n        }\n      },\n      galley_description: {\n        required: {\n          depends: function depends(element) {\n            return $('#galleyCheck').is(':checked');\n          }\n        }\n      }\n    },\n    ignore: ':hidden:not(.summernote),.note-editable.card-block',\n    errorPlacement: function errorPlacement(error, element) {\n      if (element.attr(\"name\") == \"cabin_description\") {\n        error.appendTo('.cabin_description-error');\n      } else if (element.attr(\"name\") == \"galley_description\") {\n        error.appendTo('.galley_description-error');\n      } else {\n        error.insertAfter(element);\n      }\n    },\n    messages: {\n      fuel_capacity: {\n        required: \"Fuel Capacity is required\"\n      },\n      hull_material: \"Hull material is required\",\n      anchor_type: \"Anchor Type is required\",\n      generator_fuel_type: \"Generator Fuel Type is required\",\n      generator_size: \"Generator Size is required\",\n      generator_hours: \"Generator hours is required\",\n      cabin_berths: \"Cabin Berths is required\",\n      cabin_description: \"Cabin Description is required\",\n      galley_description: \"Galley Description is required\"\n    },\n    submitHandler: function submitHandler(form) {\n      form.submit();\n    }\n  });\n  $('form[id=\"stepTwoForm\"]').submit(function (e) {\n    e.preventDefault();\n    $('form[id=\"stepTwoForm\"]').valid();\n  });\n\n  function CalculateAllPrices() {\n    defaultSelectedValue = $(\"#default_selected_plan\").val();\n    addonSelectedValue = $(\"#default_addon_selected\").val();\n    discountSelectedValue = $(\"#default_coupon_selected\").val();\n    var showOverallCost = 0;\n    showOverallCost = parseFloat(defaultSelectedValue) + parseFloat(addonSelectedValue);\n    var originalSubTotalValue = showOverallCost;\n    console.log('FINALDISCOUNTCOST');\n    console.log(FINALDISCOUNTCOST);\n    var couponValue = 0;\n\n    if (FINALDISCOUNTCOST) {\n      var couponTypeValue = FINALDISCOUNTCOST.type;\n      var couponAmountValue = FINALDISCOUNTCOST.amount;\n\n      if (couponTypeValue == 'fixed') {\n        couponValue = couponAmountValue;\n        discountSelectedValue = couponValue;\n      }\n\n      if (couponTypeValue == 'percentage') {\n        couponValue = couponAmountValue / 100;\n        discountSelectedValue = originalSubTotalValue * couponValue;\n      }\n\n      if (discountSelectedValue > 0) {\n        showOverallCost = originalSubTotalValue - discountSelectedValue;\n      }\n\n      if (couponTypeValue == 'free') {\n        discountSelectedValue = originalSubTotalValue;\n        showOverallCost = originalSubTotalValue - discountSelectedValue;\n      }\n    }\n\n    $(\".subTotalAmountLabel\").text(parseFloat(originalSubTotalValue).toFixed(2));\n    $(\".discountAmountLabel\").text(parseFloat(discountSelectedValue).toFixed(2));\n    $(\".show-overallCost\").text(parseFloat(showOverallCost).toFixed(2));\n  }\n\n  function selectPlanShowhideElems() {\n    if ($('.apply-coupon-msg').hasClass('d-none')) {\n      $('.apply-coupon-msg').removeClass('d-none');\n    }\n\n    if (!$('.coupon-applied-msg').hasClass('d-none')) {\n      $('.coupon-applied-msg').addClass('d-none');\n    }\n\n    if ($('.coupon-warning-icon').hasClass('d-none')) {\n      $('.coupon-warning-icon').removeClass('d-none');\n    }\n\n    if (!$('.coupon-success-icon').hasClass('d-none')) {\n      $('.coupon-success-icon').addClass('d-none');\n    }\n  }\n\n  var realCost = $('.real_cost').val();\n  /*Select Plans in select-plan page*/\n\n  $(document).on('click', '.plan-select', function (event) {\n    $(\"#default_addon_selected\").val(0);\n    var plan_uuid = $(this).data('uuid');\n    var plan_price = $(this).data('price');\n    var base_url = $(this).data('ajax-url');\n    $('.select_addOn').remove();\n\n    if (!$(this).children().hasClass('btn-primary')) {\n      $('.plan-btn').removeClass('btn-primary');\n      $('.plan-btn').addClass('btn-outline-dark');\n      $(this).children().addClass('btn-primary');\n    }\n\n    $.ajax({\n      url: base_url + '/get-plan-AddOn/' + plan_uuid,\n      type: \"GET\",\n      success: function success(response) {\n        $('.overall-cost').text('');\n        $('.addOns-list').html('');\n        var idCount = 0;\n        $.each(response.addOns, function (key, val) {\n          idCount = idCount++;\n          $('.addOns-list').append(\"<div class=\\\"card card-dark card-hover card-body px-4 mb-2\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-check form-check-dark\\\">\\n\\t\\t\\t\\t\\t\\t\\t<input class=\\\"form-check-input addOn-check\\\" type=\\\"checkbox\\\" data-addon-uuid=\\\"\".concat(val.uuid, \"\\\" data-addon-cost=\\\"\").concat(val.addon_cost, \"\\\" id=\\\"addOn\").concat(++idCount, \"\\\">\\n\\t\\t\\t\\t\\t\\t\\t<label class=\\\"form-check-label d-sm-flex align-items-center justify-content-between\\\" for=\\\"addOn\").concat(idCount, \"\\\"><span class=\\\"d-block px-1\\\"><span class=\\\"d-block h6 text-dark mb-2\\\">\").concat(val.addon_name, \"</span></span><span class=\\\"d-block h4 text-dark mb-0\\\">$\").concat(val.addon_cost, \"</span></label>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\"));\n        });\n        $(\"#default_selected_plan\").val(plan_price);\n        CalculateAllPrices();\n        $('.plan-uuid').val(plan_uuid);\n      }\n    });\n  });\n  /*Select Addons in select-plan page*/\n\n  $(document).on('click', '.addOn-check', function (e) {\n    var addOnCostFinal = 0;\n    $('.addOn-check').each(function () {\n      if ($(this).is(\":checked\")) {\n        var addOnCost = $(this).data('addon-cost');\n        addOnCostFinal = addOnCostFinal + addOnCost;\n      }\n    });\n    $(\"#default_addon_selected\").val(addOnCostFinal);\n    CalculateAllPrices();\n  });\n  /*Verify Coupon*/\n\n  $(document).on('click', '.coupon-verify-btn', function (event) {\n    realCost = $(\"#default_selected_plan\").val();\n    console.log(realCost);\n    var coupon = $(\"#coupon_code\").val();\n    $.ajax({\n      url: base_url + '/verify-coupon/' + coupon,\n      type: \"GET\",\n      beforeSend: function beforeSend() {\n        if ($('.coupon-spinner').hasClass(\"d-none\")) {\n          $('.coupon-spinner').removeClass(\"d-none\");\n        }\n\n        $('.coupon-verify-btn').prop('disabled', true);\n      },\n      complete: function complete() {\n        $('.coupon-spinner').addClass(\"d-none\");\n        $('.coupon-verify-btn').prop('disabled', false);\n      },\n      success: function success(response) {\n        if (response.success) {\n          var coupon = response.coupon;\n\n          if (coupon) {\n            FINALDISCOUNTCOST = coupon;\n          }\n\n          if (coupon.type == 'percentage') {\n            if ($('.stripe-form').hasClass('d-none')) {\n              $('.stripe-form').removeClass('d-none');\n            }\n\n            if ($('.terms-div').hasClass('d-none')) {\n              $('.terms-div').removeClass('d-none');\n            }\n\n            if ($('.auto-renew-div').hasClass('d-none')) {\n              $('.auto-renew-div').removeClass('d-none');\n            }\n\n            if (!$('.save-free-boat').hasClass('d-none')) {\n              $('.save-free-boat').addClass('d-none');\n            }\n\n            if ($('.plan-submit').hasClass('d-none')) {\n              $('.plan-submit').removeClass('d-none');\n            }\n          } else if (coupon.type == 'fixed') {\n            if ($('.stripe-form').hasClass('d-none')) {\n              $('.stripe-form').removeClass('d-none');\n            }\n\n            if ($('.terms-div').hasClass('d-none')) {\n              $('.terms-div').removeClass('d-none');\n            }\n\n            if ($('.auto-renew-div').hasClass('d-none')) {\n              $('.auto-renew-div').removeClass('d-none');\n            }\n\n            if (!$('.save-free-boat').hasClass('d-none')) {\n              $('.save-free-boat').addClass('d-none');\n            }\n\n            if ($('.plan-submit').hasClass('d-none')) {\n              $('.plan-submit').removeClass('d-none');\n            }\n          } else if (coupon.type == 'free') {\n            if (!$('.stripe-form').hasClass('d-none')) {\n              $('.stripe-form').addClass('d-none');\n            }\n\n            if (!$('.terms-div').hasClass('d-none')) {\n              $('.terms-div').addClass('d-none');\n            }\n\n            if (!$('.auto-renew-div').hasClass('d-none')) {\n              $('.auto-renew-div').addClass('d-none');\n            }\n\n            if ($('.save-free-boat').hasClass('d-none')) {\n              $('.save-free-boat').removeClass('d-none');\n            }\n\n            if (!$('.plan-submit').hasClass('d-none')) {\n              $('.plan-submit').addClass('d-none');\n            }\n          }\n\n          if (!$('.apply-coupon-msg').hasClass('d-none')) {\n            $('.apply-coupon-msg').addClass('d-none');\n          }\n\n          if ($('.coupon-applied-msg').hasClass('d-none')) {\n            $('.coupon-applied-msg').removeClass('d-none');\n          }\n\n          if (!$('.coupon-warning-icon').hasClass('d-none')) {\n            $('.coupon-warning-icon').addClass('d-none');\n          }\n\n          if ($('.coupon-success-icon').hasClass('d-none')) {\n            $('.coupon-success-icon').removeClass('d-none');\n          }\n\n          $('.coupon-verify-btn').remove();\n          $('#coupon_code_section').append(\"\\n\\t\\t\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-outline-primary d-block remove-coupon\\\">\\n                            <span class=\\\"spinner-border spinner-border-sm me-2 d-none remove-spinner\\\" role=\\\"status\\\" aria-hidden=\\\"true\\\"></span><span class=\\\"fi-x remove-coupon-icon\\\"></span>\\n                        </button>\");\n          $('#is_coupon_valid').val('true');\n          $('#coupon_code').prop('readonly', true);\n          CalculateAllPrices();\n          toastr.success('Coupon Verified Successfully');\n        }\n      },\n      error: function error(reject) {\n        if ($('.stripe-form').hasClass('d-none')) {\n          $('.stripe-form').removeClass('d-none');\n        }\n\n        if ($('.terms-div').hasClass('d-none')) {\n          $('.terms-div').removeClass('d-none');\n        }\n\n        if ($('.auto-renew-div').hasClass('d-none')) {\n          $('.auto-renew-div').removeClass('d-none');\n        }\n\n        if (!$('.save-free-boat').hasClass('d-none')) {\n          $('.save-free-boat').addClass('d-none');\n        }\n\n        if ($('.plan-submit').hasClass('d-none')) {\n          $('.plan-submit').removeClass('d-none');\n        }\n\n        selectPlanShowhideElems();\n        $('#is_coupon_valid').val(false);\n        $(\"#coupon_code\").val('');\n        $('#coupon_code').prop('readonly', false);\n        FINALDISCOUNTCOST = ' ';\n        CalculateAllPrices();\n        toastr.error('Invalid Coupon');\n      }\n    });\n  });\n  /*Remove Coupon*/\n\n  $(document).on('click', '.remove-coupon', function (event) {\n    $.ajax({\n      url: base_url + '/remove-coupon/',\n      type: \"GET\",\n      beforeSend: function beforeSend() {\n        if (!$('.remove-coupon-icon').hasClass('d-none')) {\n          $('.remove-coupon-icon').addClass('d-none');\n        }\n\n        if ($('.remove-spinner').hasClass('d-none')) {\n          $('.remove-spinner').removeClass('d-none');\n        }\n\n        $('.remove-coupon').prop('disabled', true);\n      },\n      complete: function complete() {\n        if ($('.remove-coupon-icon').hasClass('d-none')) {\n          $('.remove-coupon-icon').removeClass('d-none');\n        }\n\n        if (!$('.remove-spinner').hasClass('d-none')) {\n          $('.remove-spinner').addClass('d-none');\n        }\n\n        $('.remove-coupon').prop('disabled', false);\n      },\n      success: function success(response) {\n        selectPlanShowhideElems();\n        $('.remove-coupon').remove();\n        $('#coupon_code_section').append(\"<button type=\\\"button\\\" class=\\\"btn btn-outline-primary d-block coupon-verify-btn\\\">\\n                        <span class=\\\"spinner-border spinner-border-sm me-2 d-none coupon-spinner\\\" role=\\\"status\\\" aria-hidden=\\\"true\\\"></span>VERIFY\\n                    </button>\");\n        $('#is_coupon_valid').val(false);\n        $(\"#coupon_code\").val('');\n        $('#coupon_code').prop('readonly', false);\n        $(\".discountAmountLabel\").text('0.00');\n        FINALDISCOUNTCOST = ' ';\n        CalculateAllPrices();\n        toastr.success('Coupon Removed Successfully');\n      },\n      error: function error(reject) {\n        toastr.error('Failed to remove coupon');\n      }\n    });\n  });\n  /*Save free boat*/\n\n  $(document).on('click', '.save-free-boat', function (event) {\n    event.preventDefault();\n    var form = document.getElementById('freeBoatForm');\n    form.submit();\n  });\n  /*Anchor Checkbox*/\n\n  $(document).on('click', '#anchorCheck', function (event) {\n    if ($(this).is(\":checked\")) {\n      $('.anchor-type').removeClass('d-none');\n    } else {\n      $('.anchor-type').addClass('d-none');\n    }\n  });\n  /*Head Checkbox*/\n\n  $(document).on('click', '#headCheck', function (event) {\n    if ($(this).is(\":checked\")) {\n      $('.head-section').removeClass('d-none');\n    } else {\n      $('.head-section').addClass('d-none');\n    }\n  });\n  /*Generator Checkbox*/\n\n  $(document).on('click', '#generatorCheck', function (event) {\n    if ($(this).is(\":checked\")) {\n      $('.generator-section').removeClass('d-none');\n    } else {\n      $(\"#generator_fuel_type\").val('');\n      $(\"#generator_size\").val('');\n      $(\"#generator_hours\").val('');\n      $('.generator-section').addClass('d-none');\n    }\n  });\n\n  if ($('#cabinCheck').is(\":checked\")) {\n    $(\"input[name*=cabin_description]\").rules('add', {\n      required: true,\n      messages: {\n        required: \"Cabin Description is required\"\n      }\n    });\n    $(\"#cabinDescription\").prop(\"required\", true);\n  } else {\n    $(\"#berths\").val('');\n    $('#cabinDescription').summernote('reset'); // $(\"#cabinDescription\").val('');\n  }\n  /*Cabin Checkbox*/\n\n\n  $(document).on('click', '#cabinCheck', function (event) {\n    if ($(this).is(\":checked\")) {\n      $(\"input[name*=cabin_berths]\").rules('add', {\n        required: true,\n        messages: {\n          required: \"Cabin berths is required\"\n        }\n      });\n      $(\"input[name*=cabin_description]\").rules('add', {\n        required: true,\n        messages: {\n          required: \"Cabin Description is required\"\n        }\n      });\n      $(\"#cabinDescription\").prop(\"required\", true);\n      $('.cabin-section').removeClass('d-none');\n    } else {\n      $(\"#cabinDescription\").prop(\"required\", false);\n      $('.cabin-section').addClass('d-none');\n    }\n  });\n  /*Galley Checkbox*/\n\n  $(document).on('click', '#galleyCheck', function (event) {\n    if ($(this).is(\":checked\")) {\n      $(\"input[name*=galley_description]\").rules('add', {\n        required: true,\n        messages: {\n          required: \"Galley Description is required\"\n        }\n      });\n      $(\"#galleyDescription\").prop(\"required\", true);\n      $('.galley-section').removeClass('d-none');\n    } else {\n      $(\"#galleyDescription\").prop(\"required\", false);\n      $('.galley-section').addClass('d-none');\n    }\n  });\n  $(document).on('change', '.boat-type', function () {\n    var boatType = $(this).val();\n    $.ajax({\n      url: base_url + '/get-type-category/' + boatType,\n      type: \"GET\",\n      beforeSend: function beforeSend() {\n        $(\"#category\").attr('disabled', 'disabled');\n      },\n      complete: function complete() {\n        $(\"#category\").removeAttr(\"disabled\");\n      },\n      success: function success(response) {\n        $('#category').html('');\n        $('#category').append(\"<option value=\\\"\\\" selected disabled>-- Select Category --</option>\");\n        $.each(response.categories, function (key, category) {\n          $('#category').append(\"\\n\\t\\t\\t\\t\\t\\t\\t<option value=\\\"\".concat(category.uuid, \"\\\">\").concat(category.name, \"</option>\\n\\t\\t\\t\\t\\t\\t\"));\n        });\n      }\n    });\n  });\n  $(document).on('click', '#addEngine', function () {\n    var num = $('.engineSection').length;\n    var newNum = new Number(num + 1);\n    var prevEngineTypeVal = $(\"#engineType\" + (newNum - 1)).val();\n    var prevFuelTypeVal = $(\"#fuelType\" + (newNum - 1)).val();\n    var newSection = $('#engineSection' + num).clone().attr(\"id\", \"engineSection\" + newNum);\n    newSection.children(\":first\").children(\":first\").children(\":first\").children(\"span\").attr(\"id\", \"engineCount\" + newNum).text(newNum);\n    newSection.children(\":first\").children(\":first\").children(\"button\").removeClass(\"d-none\");\n\n    if (prevEngineTypeVal == '' || prevEngineTypeVal == null) {\n      newSection.children(\":nth-child(2)\").children(\":first\").children(\"select\").find('option:first').prop('selected', true);\n    } else {\n      newSection.children(\":nth-child(2)\").children(\":first\").children(\"select\").attr(\"id\", \"engineType\" + newNum).attr(\"name\", \"engine_type\" + newNum).val(prevEngineTypeVal);\n    }\n\n    if (prevFuelTypeVal == '' || prevFuelTypeVal == null) {\n      newSection.children(\":nth-child(2)\").children(\":nth-child(2)\").children(\"select\").find('option:first').prop('selected', true);\n    } else {\n      newSection.children(\":nth-child(2)\").children(\":nth-child(2)\").children(\"select\").attr(\"id\", \"fuelType\" + newNum).attr(\"name\", \"fuel_type\" + newNum).val(prevFuelTypeVal);\n    }\n\n    newSection.children(\":nth-child(3)\").children(\":first\").children(\"input\").attr(\"id\", \"engineMake\" + newNum).attr(\"name\", \"make\" + newNum);\n    newSection.children(\":nth-child(3)\").children(\":nth-child(2)\").children(\"input\").attr(\"id\", \"engineModel\" + newNum).attr(\"name\", \"model\" + newNum);\n    newSection.children(\":nth-child(4)\").children(\":first\").children(\"input\").attr(\"id\", \"horsePower\" + newNum).attr(\"name\", \"horse_power\" + newNum);\n    newSection.children(\":nth-child(4)\").children(\":nth-child(2)\").children(\"input\").attr(\"id\", \"engineHours\" + newNum).attr(\"name\", \"engine_hours\" + newNum);\n    newSection.insertAfter('#engineSection' + num); // newSection.find('span.error').text('');\n\n    newSection.find('span.error').remove();\n    $(\"#delEngine\").removeClass(\"d-none\");\n  });\n  $(document).on('click', '#addNewEngine', function () {\n    var num = $('.engineSection').length;\n    var newNum = new Number(num + 1);\n    var newSection = $('#engineSection' + num).clone().attr(\"id\", \"engineSection\" + newNum);\n    newSection.children(\":first\").children(\":first\").children(\":first\").children(\"span\").attr(\"id\", \"engineCount\" + newNum).text(newNum);\n    newSection.children(\":first\").children(\":first\").children(\"button\").removeClass(\"d-none\");\n    newSection.children(\":nth-child(2)\").children(\":first\").children(\"select\").attr(\"id\", \"engineType\" + newNum).attr(\"name\", \"engine_type\" + newNum).val('');\n    newSection.children(\":nth-child(2)\").children(\":first\").children(\"select\").find('option:first').prop('selected', true);\n    newSection.children(\":nth-child(2)\").children(\":nth-child(2)\").children(\"select\").attr(\"id\", \"fuelType\" + newNum).attr(\"name\", \"fuel_type\" + newNum).val('');\n    newSection.children(\":nth-child(2)\").children(\":nth-child(2)\").children(\"select\").find('option:first').prop('selected', true);\n    newSection.children(\":nth-child(3)\").children(\":first\").children(\"input\").attr(\"id\", \"engineMake\" + newNum).attr(\"name\", \"make\" + newNum).val('');\n    newSection.children(\":nth-child(3)\").children(\":nth-child(2)\").children(\"input\").attr(\"id\", \"engineModel\" + newNum).attr(\"name\", \"model\" + newNum).val('');\n    newSection.children(\":nth-child(4)\").children(\":first\").children(\"input\").attr(\"id\", \"horsePower\" + newNum).attr(\"name\", \"horse_power\" + newNum).val('');\n    newSection.children(\":nth-child(4)\").children(\":nth-child(2)\").children(\"input\").attr(\"id\", \"engineHours\" + newNum).attr(\"name\", \"engine_hours\" + newNum).val('');\n    newSection.insertAfter('#engineSection' + num);\n    newSection.find('span.error').remove();\n    $(\"#delEngine\").removeClass(\"d-none\");\n  });\n  $(document).on('click', \"#delEngine\", function () {\n    var num = parseInt($(this).prev().children().text(), 10);\n    $(\"#engineSection\" + num).remove(); // remove the selected element\n\n    var sectionLength = $(\".engineSection\").length;\n    $('.engineSection').each(function (index, elem) {\n      var newNum = index + 1;\n      $(this).attr(\"id\", \"engineSection\" + newNum);\n      $(this).children(\":first\").children(\":first\").children(\":first\").children(\"span\").attr(\"id\", \"engineCount\" + newNum).text(newNum);\n      $(this).children(\":nth-child(2)\").children(\":first\").children(\"select\").attr(\"id\", \"engineType\" + newNum).attr(\"name\", \"engine_type\" + newNum);\n      $(this).children(\":nth-child(2)\").children(\":nth-child(2)\").children(\"select\").attr(\"id\", \"fuelType\" + newNum).attr(\"name\", \"fuel_type\" + newNum);\n      $(this).children(\":nth-child(3)\").children(\":first\").children(\"input\").attr(\"id\", \"engineMake\" + newNum).attr(\"name\", \"make\" + newNum);\n      $(this).children(\":nth-child(3)\").children(\":nth-child(2)\").children(\"input\").attr(\"id\", \"engineModel\" + newNum).attr(\"name\", \"model\" + newNum);\n      $(this).children(\":nth-child(4)\").children(\":first\").children(\"input\").attr(\"id\", \"horsePower\" + newNum).attr(\"name\", \"horse_power\" + newNum);\n      $(this).children(\":nth-child(4)\").children(\":nth-child(2)\").children(\"input\").attr(\"id\", \"engineHours\" + newNum).attr(\"name\", \"engine_hours\" + newNum);\n    }); // if only one element remains, hide the \"remove\" button\n\n    if (sectionLength == 1) {\n      $(\"#delEngine\").addClass(\"d-none\");\n    } else {\n      $(\"#delEngine\").removeClass(\"d-none\");\n    }\n  });\n  $(document).on('keypress', '.engine-hours', function (e) {\n    var regex = new RegExp(\"^[0-9]+$\");\n    var str = String.fromCharCode(!e.charCode ? e.which : e.charCode);\n\n    if (regex.test(str)) {\n      return true;\n    }\n\n    e.preventDefault();\n    return false;\n  });\n  $(document).on('keypress', '#hullId, #fuelCapacity, #holding, #freshWater, #cruisingSpeed, #maxSpeed, #head, #engine_count', function (e) {\n    var regex = new RegExp(\"^[a-zA-Z0-9]+$\");\n    var str = String.fromCharCode(!e.charCode ? e.which : e.charCode);\n\n    if (regex.test(str)) {\n      return true;\n    }\n\n    e.preventDefault();\n    return false;\n  });\n  $(document).on('change', '#userProfileCountrySelect', function () {\n    var country = $(this).find(\"option:selected\").val();\n    var stateElement = $('#userProfileStateSelect');\n    $.ajax({\n      url: base_url + '/get-states/' + country,\n      type: \"GET\",\n      beforeSend: function beforeSend() {//stateElement.attr('disabled', 'disabled');\n      },\n      success: function success(response) {\n        $('.profile-state-value').html('Not specified');\n        stateElement.html(''); //stateElement.removeAttr(\"disabled\");\n\n        if (response.states.length > 0) {\n          stateElement.append(\"<option value=\\\"\\\" selected disabled>-- Select State --</option>\");\n          $.each(response.states, function (key, state) {\n            stateElement.append(\"\\n                            <option value=\\\"\".concat(state.name, \"\\\">\").concat(state.name, \"</option>\\n                        \"));\n          });\n        }\n      }\n    });\n  });\n  $(document).on('change', '.select-country', function () {\n    var min = 0;\n    var max = 8;\n\n    if ($(this).val() == 'United States') {\n      min = 5;\n      max = 5;\n    }\n\n    $(\"input[name*=zip_code]\").rules('add', {\n      minlength: min,\n      maxlength: max,\n      messages: {\n        required: \"Zip Code is required \"\n      }\n    });\n    var country = $(this).find(\"option:selected\").val();\n    var elem = $('.select-state');\n    $.ajax({\n      url: base_url + '/get-states/' + country,\n      type: \"GET\",\n      beforeSend: function beforeSend() {\n        elem.attr('disabled', 'disabled');\n      },\n      success: function success(response) {\n        elem.html('');\n        elem.removeAttr(\"disabled\");\n\n        if (response.states.length > 0) {\n          elem.append(\"<option value=\\\"\\\" selected disabled>-- Select State --</option>\");\n          $.each(response.states, function (key, state) {\n            elem.append(\"\\n                            <option value=\\\"\".concat(state.name, \"\\\">\").concat(state.name, \"</option>\\n                        \"));\n          });\n        }\n      }\n    });\n  });\n  $('#userProfileStateSelect').on('select2:select', function (e) {\n    var data = e.params.data;\n    $('#stateValue').html(data.id);\n  }); // Package terms and Conditions\n\n  $(document).on('click', '#terms', function () {\n    if ($(this).is(\":checked\")) {\n      $('.plan-submit').removeAttr('disabled');\n    } else {\n      $('.plan-submit').attr('disabled', 'disabled');\n    }\n  }); // JS helps to set live wire listings view types\n\n  $(document).on('click', '.grid-livewires-view', function () {\n    $('#viewType').val('grid');\n    document.addEventListener('livewire:load', function () {\n      var element = document.getElementById('#viewType');\n      element.dispatchEvent(new Event('input'));\n    });\n\n    if ($(\".catalog-livewires-view\").hasClass('active')) {\n      $(\".catalog-livewires-view\").removeClass('active');\n    }\n\n    if (!$(\".catalog-livewires-card\").hasClass('d-none')) {\n      $(\".catalog-livewires-card\").addClass('d-none');\n    }\n\n    if (!$(\".grid-livewires-view\").hasClass('active')) {\n      $(\".grid-livewires-view\").addClass('active');\n    }\n\n    if ($(\".grid-livewires-card\").hasClass('d-none')) {\n      $(\".grid-livewires-card\").removeClass('d-none');\n    }\n  }); // JS helps to set live wire listings view types\n\n  $(document).on('click', '.catalog-livewires-view', function () {\n    $('#viewType').val('list');\n\n    if ($(\".grid-livewires-view\").hasClass('active')) {\n      $(\".grid-livewires-view\").removeClass('active');\n    }\n\n    if (!$(\".grid-livewires-card\").hasClass('d-none')) {\n      $(\".grid-livewires-card\").addClass('d-none');\n    }\n\n    if (!$(\".catalog-livewires-view\").hasClass('active')) {\n      $(\".catalog-livewires-view\").addClass('active');\n    }\n\n    if ($(\".catalog-livewires-card\").hasClass('d-none')) {\n      $(\".catalog-livewires-card\").removeClass('d-none');\n    }\n  }); //This function use to set model value for homepage\n\n  $(document).on('click', '.model-dropdown', function () {\n    //$(this).addClass('active');\n    var selectedMenuContent = $(this).find('.dropdown-item-label').html();\n    $(this).parents().find('.modal-label').text('');\n    $(this).parents().find('.modal-label').text(selectedMenuContent);\n    $('.model-input').val(selectedMenuContent);\n  }); // Function to update model data based on selected brand\n\n  $(document).on('click', '.get-models', function () {\n    var url = $(this).data('ajax-url');\n    var type = $(this).data('type');\n    var modelId = $(this).data('model-id');\n    getModels(url, type, modelId);\n  }); // Function to update model data based on selected brand\n\n  $(document).on('change', '.model-select', function () {\n    var slug = $(this).val();\n    var url = base_url + '/api/models/' + slug;\n    var type = $(this).data('type');\n    var modelId = $(this).data('model-id');\n    getModels(url, type, modelId);\n  });\n  /*Summernote for all forms*/\n\n  $('.summernote').summernote({\n    toolbar: [// [groupName, [list of button]]\n    ['style', ['bold', 'italic', 'underline']], // ['font', ['strikethrough', 'superscript', 'subscript']],\n    // ['fontsize', ['fontsize']],\n    // ['color', ['color']],\n    ['para', ['ul', 'ol']] // ['height', ['height']]\n    ],\n    placeholder: '',\n    tabSize: 2,\n    height: 80\n  }); // $(\".truncate\").each(function() {\n  //     var showChar = 30;\n  //     var ellipsesText = \"...\";\n  //     var content = $(this).html();\n  //     if (content.length > showChar) {\n  //       var c = content.substr(0, showChar);\n  //       var h = content;\n  //       var html = '<div class=\"truncate-text\" style=\"display:block\">' + c + '<span class=\"moreellipses\">' + ellipsesText + '&nbsp;&nbsp;<a href=\"\" class=\"moreless more\">more</a></span></span></div><div class=\"truncate-text\" style=\"display:none\">' + h + '<a href=\"\" class=\"moreless less\">Less</a></span></div>';\n  //       $(this).html(html);\n  //     }\n  //   });\n  //   $(\".moreless\").click(function() {\n  //     var thisEl = $(this);\n  //     var cT = thisEl.closest(\".truncate-text\");\n  //     var tX = \".truncate-text\";\n  //     if (thisEl.hasClass(\"less\")) {\n  //       cT.prev(tX).toggle();\n  //       cT.slideToggle();\n  //     } else {\n  //       cT.toggle();\n  //       cT.next(tX).fadeToggle();\n  //     }\n  //     return false;\n  //   });\n  // Modal View settings use to show form contents modal\n\n  $(document).on('click', '.open-model-btn', function () {\n    var url = $(this).attr(\"data-href\");\n    $(\"#authModalBox .modal-body\").load(url, function (result) {\n      $(\"#authModalBox\").modal({\n        backdrop: \"static\",\n        keyboard: false,\n        show: true\n      });\n    });\n  }); // Save modal form\n\n  $(document).on('click', '.save-data', function (e) {\n    e.preventDefault();\n    var $form = $(this).parents('form');\n    var url = $form.attr('action');\n    $.ajax({\n      type: $form.attr('method'),\n      url: url,\n      data: $form.serialize(),\n      success: function success(response) {\n        location.reload();\n      },\n      error: function error(reject) {\n        if (reject.status === 422) {\n          var errors = $.parseJSON(reject.responseText);\n          $.each(errors.errors, function (key, val) {\n            if (!$('#' + key).hasClass(\"is-invalid\")) {\n              $('#' + key).addClass(\"is-invalid\");\n            }\n\n            $(\"#\" + key + \"_error\").text(val);\n          });\n        }\n      }\n    });\n  });\n  $('.profile-upload').on('FilePond:addfile', function (e) {\n    ///console.log('file added event', e.detail.file.file);\n    try {\n      convertFileToBase64(e.detail.file.file).then(function (result) {\n        $('#newFile').val(result);\n      }); //do something with above data string\n    } catch (ex) {//console.log(ex);\n      //handle error\n    }\n  });\n  /*Step-four Images edit*/\n\n  var files = {};\n\n  if ($('.server-image').length) {\n    // alert(\"heheh\");\n    var boat_uuid = $('.server-image').data('boat-uuid');\n\n    var files = function () {\n      var files = {};\n      $.ajax({\n        async: false,\n        url: base_url + '/get-images/' + boat_uuid,\n        type: \"GET\",\n        success: function success(response) {\n          var collectImages = [];\n          var imagesNum = response.imagesNum;\n          $.each(response.images, function (key, imagePath) {\n            var image = imagePath.split(\"/\");\n            var imagename = image[4];\n            files[imagename] = base_url + \"/\" + imagePath;\n          });\n\n          for (var img in files) {\n            collectImages.push(files[img]);\n          }\n\n          var inputElement = document.querySelector('.boat-images-uploader');\n          var uploadBtn = \"<div class=\\\"btn btn-primary\\\"><i class=\\\"fi-cloud-upload me-1\\\"></i>Upload Images</div><div class=\\\"text-dark opacity-70\\\">or drag them in</div>\";\n          var pond = FilePond.create(inputElement, {\n            name: 'image',\n            allowMultiple: true,\n            maxFiles: imagesNum,\n            acceptedFileTypes: ['image/png', 'image/jpeg', 'image/*'],\n            itemInsertLocation: 'after',\n            itemInsertInterval: 100,\n            required: true,\n            allowBrowse: true,\n            labelIdle: uploadBtn,\n            labelButtonProcessItem: false // allowImagePreview: true,\n\n          });\n\n          try {\n            pond.addFiles(collectImages);\n          } catch (ex) {\n            console.log(ex);\n          }\n        }\n      });\n      return files;\n    }();\n  }\n  /*Images added one by one*/\n\n\n  $('.boat-images-uploader').on('FilePond:addfile', function (e) {\n    if (!$('.images-warning').hasClass(\"d-none\")) {\n      $('.images-warning').addClass('d-none');\n    }\n\n    try {\n      convertFileToBase64(e.detail.file.file).then(function (result) {\n        var file_name = e.detail.file.file.name;\n        files[file_name] = result;\n        $('.image-uploadDiv').append(\"<input type=\\\"hidden\\\" class=\\\"boat-images\\\" name=\\\"boat_images[]\\\"  value=\\\"\".concat(result, \"\\\">\"));\n      });\n    } catch (ex) {\n      console.log(ex);\n    }\n  });\n  /*If tried to upload images more than the limit*/\n\n  $('.boat-images-uploader').on('FilePond:warning', function (e) {\n    $('.images-warning').removeClass('d-none');\n  });\n  /*Remove images from preview*/\n\n  $('.boat-images-uploader').on('FilePond:removefile', function (e) {\n    var remove_file = e.detail.file.file.name;\n    $('.boat-images').remove();\n    delete files[remove_file];\n\n    for (var fileName in files) {\n      $('.image-uploadDiv').append(\"<input type=\\\"hidden\\\" class=\\\"boat-images\\\" name=\\\"boat_images[]\\\"  value=\\\"\".concat(files[fileName], \"\\\">\"));\n    }\n  });\n  /*Step-four videos edit*/\n\n  var videofiles = {};\n\n  if ($('.server-video').length) {\n    var boat_uuid = $('.server-video').data('boat-uuid');\n\n    var videofiles = function () {\n      var videofiles = {};\n      $.ajax({\n        async: false,\n        url: base_url + '/get-videos/' + boat_uuid,\n        type: \"GET\",\n        success: function success(response) {\n          var collectVideos = [];\n          var videosNum = response.videosNum;\n          console.log(response.videos);\n          $.each(response.videos, function (key, videoPath) {\n            var video = videoPath.split(\"/\");\n            var videoname = video[4];\n            videofiles[videoname] = base_url + \"/\" + videoPath;\n          });\n\n          for (var vid in videofiles) {\n            collectVideos.push(videofiles[vid]);\n          }\n\n          var inputElement = document.querySelector('.boat-videos-uploader');\n          var uploadBtn = \"<div class=\\\"btn btn-primary mb-3\\\"><i class=\\\"fi-cloud-upload me-1\\\"></i>Upload Videos</div><div class=\\\"text-dark opacity-70\\\">or drag them in</div>\";\n          var pond = FilePond.create(inputElement, {\n            allowMultiple: true,\n            maxFiles: videosNum,\n            acceptedFileTypes: ['video/mp4', 'video/x-m4v', 'video/*'],\n            allowBrowse: true,\n            labelIdle: uploadBtn,\n            labelButtonProcessItem: true\n          });\n\n          try {\n            pond.addFiles(collectVideos);\n          } catch (ex) {\n            console.log(ex);\n          }\n        }\n      });\n      return videofiles;\n    }();\n  }\n  /*Videos added one by one*/\n\n\n  $('.boat-videos-uploader').on('FilePond:addfile', function (e) {\n    if (!$('.videos-warning').hasClass(\"d-none\")) {\n      $('.videos-warning').addClass('d-none');\n    }\n\n    try {\n      convertFileToBase64(e.detail.file.file).then(function (result) {\n        var video_name = e.detail.file.file.name;\n        videofiles[video_name] = result;\n        $('.video-uploadDiv').append(\"<input type=\\\"hidden\\\" class=\\\"boat-videos\\\" name=\\\"boat_videos[]\\\"  value=\\\"\".concat(result, \"\\\">\"));\n      });\n    } catch (ex) {\n      console.log(ex);\n    }\n  });\n  /*If tried to upload videos more than the limit*/\n\n  $('.boat-videos-uploader').on('FilePond:warning', function (e) {\n    $('.videos-warning').removeClass('d-none');\n  });\n  /*Remove videos from preview*/\n\n  $('.boat-videos-uploader').on('FilePond:removefile', function (e) {\n    var remove_file = e.detail.file.file.name;\n    $('.boat-videos').remove();\n    delete videofiles[remove_file];\n\n    for (var fileName in videofiles) {\n      $('.video-uploadDiv').append(\"<input type=\\\"hidden\\\" class=\\\"boat-videos\\\" name=\\\"boat_videos[]\\\"  value=\\\"\".concat(videofiles[fileName], \"\\\">\"));\n    }\n  });\n  $(document).on('click', '.sell-boats', function () {\n    if ($(this).data('user-logged')) {\n      $('.is-sell-boat').val(false);\n    } else {\n      $('.is-sell-boat').val(true);\n    }\n  });\n  $(document).on('click', '.user-sign-in', function () {\n    $('.is-sell-boat').val(false);\n  }); // Function helps to send email to the boat seller\n\n  $(document).on('submit', '.send-mail-to-boat-seller', function (event) {\n    event.preventDefault();\n    var message = $(this).find('.message-to-seller').val();\n    var email = $(this).find('.seller-email').val();\n    var submitButtonId = $(this).data('submit');\n    $.ajax({\n      type: 'POST',\n      url: base_url + '/email-to-yacht-seller',\n      data: {\n        message: message,\n        email: email\n      },\n      beforeSend: function beforeSend() {\n        if ($('#loader').hasClass(\"d-none\")) {\n          $('#loader').removeClass(\"d-none\");\n        }\n\n        if (!$('#' + submitButtonId).hasClass(\"disabled\")) {\n          $('#' + submitButtonId).addClass(\"disabled\");\n        }\n      },\n      success: function success(response) {\n        tostrMessage('success', \"Message sended successfully!\");\n      },\n      error: function error(reject) {\n        tostrMessage('error', 'Failed to send message!');\n      },\n      complete: function complete() {\n        $('.message-to-seller').val('');\n        $('.send-mail-to-boat-seller')[0].reset();\n\n        if ($(\".send-mail-to-boat-seller\").hasClass('was-validated')) {\n          $(\".send-mail-to-boat-seller\").removeClass('was-validated');\n        }\n\n        if ($('#sendMail').hasClass(\"show\")) {\n          $('#sendMail').removeClass(\"show\");\n        }\n\n        if ($('#' + submitButtonId).hasClass(\"disabled\")) {\n          $('#' + submitButtonId).removeClass(\"disabled\");\n        }\n\n        if (!$('#loader').hasClass(\"d-none\")) {\n          $('#loader').addClass(\"d-none\");\n        }\n      }\n    });\n  });\n  /*Cancel Subscription Modal Setup*/\n\n  $('#cancelSubscriptionModal').modal({\n    backdrop: 'static',\n    keyboard: false\n  });\n  /*Cancel Subscription*/\n\n  $(document).on('click', '.cancel-subscription', function () {\n    var subscription_name = $(this).data('subscription-name');\n    $(\"#confirm-cancellation-subscription\").attr('data-subscription-name', subscription_name);\n    $('#cancelSubscriptionModal').modal('show');\n  });\n  /*Cancel Subscription Modal*/\n\n  $(document).on('click', '.confirm-cancellation-subscription', function () {\n    var subscriptionName = $(this).data('subscription-name');\n    var url = base_url + '/cancel-subscription/' + subscriptionName;\n    $.ajax({\n      type: 'POST',\n      url: url,\n      beforeSend: function beforeSend() {\n        $('.confirm-cancellation-subscription').addClass(\"disabled\");\n        $('.cancel-spinner').show();\n      },\n      success: function success(response) {\n        if (response.success) {\n          $('.cancel-subscription-text').html(\"<h4 class=\\\"h4 text-dark d-flex justify-content-center p-4\\\">Your Subscription Auto Renewal has cancelled!</h4>\");\n          $('.cancel-sub-btn-div').html(\"<button type=\\\"button\\\" class=\\\"btn btn-primary mx-2 close-subscription-modal\\\">Ok</button>\");\n        }\n      },\n      errror: function errror(reject) {\n        $('.cancel-spinner').hide();\n\n        if ($('.confirm-cancellation-subscription').hasClass(\"disabled\")) {\n          $('.confirm-cancellation-subscription').removeClass(\"disabled\");\n        }\n\n        tostrMessage('error', 'Cannot Cancel this Subscription!');\n        $('#cancelSubscriptionModal').modal('hide');\n      }\n    });\n  });\n  /*Close Cancelled Subscription Modal after confirm*/\n\n  $(document).on('click', '.close-subscription-modal', function () {\n    location.reload();\n  });\n  /*Delete Listing Modal Setup*/\n\n  $('#deleteListingModal').modal({\n    backdrop: 'static',\n    keyboard: false\n  });\n  /*Delete Listing*/\n\n  $(document).on('click', '.delete-listing', function () {\n    var boat_uuid = $(this).data('boat-uuid');\n    $(\"#confirm-delete-listing\").attr('data-boat-uuid', boat_uuid);\n    $('#deleteListingModal').modal('show');\n  });\n  /*Delete Listing Modal*/\n\n  $(document).on('click', '#confirm-delete-listing', function () {\n    var boat_uuid = $(this).data('boat-uuid');\n    var url = base_url + '/delete-yacht/' + boat_uuid;\n    $.ajax({\n      type: 'POST',\n      url: url,\n      beforeSend: function beforeSend() {\n        $('#confirm-delete-listing').addClass(\"disabled\");\n        $('.delete-spinner').show();\n      },\n      success: function success(response) {\n        if (response.success) {\n          $('.delete-text').html(\"<h4 class=\\\"h4 text-dark d-flex justify-content-center p-4\\\">Your Yacht removed Successfully!</h4>\");\n          $('.delete-btn-div').html(\"<button type=\\\"button\\\" class=\\\"btn btn-primary mx-2 close-delete-modal\\\">Ok</button>\");\n        } else {\n          $('.cancel-spinner').hide();\n\n          if ($('#confirm-delete-listing').hasClass(\"disabled\")) {\n            $('#confirm-delete-listing').removeClass(\"disabled\");\n          }\n\n          tostrMessage('error', 'Cannot delete this Yacht!');\n          $('#deleteListingModal').modal('hide');\n        }\n      },\n      errror: function errror(reject) {\n        $('.cancel-spinner').hide();\n\n        if ($('#confirm-delete-listing').hasClass(\"disabled\")) {\n          $('#confirm-delete-listing').removeClass(\"disabled\");\n        }\n\n        tostrMessage('error', 'Cannot delete this Yacht!');\n        $('#deleteListingModal').modal('hide');\n      }\n    });\n  });\n  /*Close Deleted Yacht Modal after deletion*/\n\n  $(document).on('click', '.close-delete-modal', function () {\n    location.reload();\n  });\n};\n/** Function helps to clear all form data when modal closed */\n\n\n$(\"#signInModal\").on(\"hide.bs.modal\", function () {\n  $('#loginForm')[0].reset();\n  /** Clear email fields */\n\n  var emailId = '#signInEmail';\n\n  if ($(emailId).hasClass(\"is-invalid\")) {\n    $(emailId).removeClass(\"is-invalid\");\n  }\n\n  $('#isSellBoat').val(false);\n  $('.email_error').html('');\n  $(emailId + '-error').html('');\n  /** Clear password fields */\n\n  var passwordId = '#signInPassword';\n\n  if ($(passwordId).hasClass(\"is-invalid\")) {\n    $(passwordId).removeClass(\"is-invalid\");\n  }\n\n  $('.password_error').html('');\n  $(passwordId + '-error').html('');\n});\n$(\"#signUpModal\").on(\"hide.bs.modal\", function () {\n  $('#signupForm')[0].reset();\n  /** Clear first name fields */\n\n  var firstNameId = '#signupFirstName';\n\n  if ($(firstNameId).hasClass(\"is-invalid\")) {\n    $(firstNameId).removeClass(\"is-invalid\");\n  }\n\n  $('.first_name_error').html('');\n  $(firstNameId + '-error').html('');\n  /** Clear last name fields */\n\n  var lastNameId = '#signupLastName';\n\n  if ($(lastNameId).hasClass(\"is-invalid\")) {\n    $(lastNameId).removeClass(\"is-invalid\");\n  }\n\n  $('.last_name_error').html('');\n  $(lastNameId + '-error').html('');\n  /** Clear contact number fields */\n\n  var contactNumberId = '#signupContactNumber';\n\n  if ($(contactNumberId).hasClass(\"is-invalid\")) {\n    $(contactNumberId).removeClass(\"is-invalid\");\n  }\n\n  $('.contact_number_error').html('');\n  $(contactNumberId + '-error').html('');\n  /** Clear email fields */\n\n  var emailId = '#signupEmail';\n\n  if ($(emailId).hasClass(\"is-invalid\")) {\n    $(emailId).removeClass(\"is-invalid\");\n  }\n\n  $('.email_error').html('');\n  $(emailId + '-error').html('');\n  /** Clear email fields */\n\n  var passwordId = '#signupPassword';\n\n  if ($(passwordId).hasClass(\"is-invalid\")) {\n    $(passwordId).removeClass(\"is-invalid\");\n  }\n\n  $('.password_error').html('');\n  $(passwordId + '-error').html('');\n  /** Clear email fields */\n\n  var confirmPasswordId = '#signupPasswordConfirm';\n\n  if ($(confirmPasswordId).hasClass(\"is-invalid\")) {\n    $(confirmPasswordId).removeClass(\"is-invalid\");\n  }\n\n  $('.email_error').html('');\n  $(confirmPasswordId + '-error').html('');\n});\n/** Function helps to clear all form data when modal closed */\n\n$(\"#resetModal\").on(\"hide.bs.modal\", function () {\n  $('#resetForm')[0].reset();\n  /** Clear email fields */\n\n  var emailId = '#resetEmail';\n\n  if ($(emailId).hasClass(\"is-invalid\")) {\n    $(emailId).removeClass(\"is-invalid\");\n  }\n\n  $('.email_error').html('');\n  $(emailId + '-error').html('');\n});\n\nvar setView = function setView(viewType) {\n  if (viewType == 'grid') {\n    if ($(\".catalog-livewires-view\").hasClass('active')) {\n      $(\".catalog-livewires-view\").removeClass('active');\n    }\n\n    if (!$(\".catalog-livewires-card\").hasClass('d-none')) {\n      $(\".catalog-livewires-card\").addClass('d-none');\n    }\n\n    if (!$(\".grid-livewires-view\").hasClass('active')) {\n      $(\".grid-livewires-view\").addClass('active');\n    }\n\n    if ($(\".grid-livewires-card\").hasClass('d-none')) {\n      $(\".grid-livewires-card\").removeClass('d-none');\n    }\n  } else {\n    if ($(\".grid-livewires-view\").hasClass('active')) {\n      $(\".grid-livewires-view\").removeClass('active');\n    }\n\n    if (!$(\".grid-livewires-card\").hasClass('d-none')) {\n      $(\".grid-livewires-card\").addClass('d-none');\n    }\n\n    if (!$(\".catalog-livewires-view\").hasClass('active')) {\n      $(\".catalog-livewires-view\").addClass('active');\n    }\n\n    if ($(\".catalog-livewires-card\").hasClass('d-none')) {\n      $(\".catalog-livewires-card\").removeClass('d-none');\n    }\n  }\n};\n\nwindow.addEventListener('livewire-list-updated', function (event) {\n  // console.log('Name updated to: ' + event.detail.view);\n  // Block boat check-box on then hide block boats else show block boat form\n  if ($('#showBlockedBoats').length) {\n    if ($('#showBlockedBoats:checked').val()) {\n      if ($('#liveWireBlockBoats').length) {\n        $('#liveWireBlockBoats').addClass('d-none');\n\n        if (!$('#liveWireBlockBoats').hasClass(\"d-none\")) {\n          $('#liveWireBlockBoats').addClass(\"d-none\");\n        }\n      }\n\n      if ($('.livewire-unblock-boats').length) {\n        $('.livewire-unblock-boats').removeClass('d-none');\n\n        if ($('.livewire-unblock-boats').hasClass(\"d-none\")) {\n          $('.livewire-unblock-boats').removeClass(\"d-none\");\n        }\n      }\n    } else {\n      if ($('#liveWireBlockBoats').length) {\n        if ($('#liveWireBlockBoats').hasClass(\"disabled\")) {\n          $('#liveWireBlockBoats').removeClass(\"disabled\");\n        }\n      }\n\n      if ($('.livewire-unblock-boats').length) {\n        if (!$('.livewire-unblock-boats').hasClass(\"disabled\")) {\n          $('.livewire-unblock-boats').addClass(\"disabled\");\n        }\n      }\n    }\n  } // forEach function\n\n\n  var forEach = function forEach(array, callback, scope) {\n    for (var i = 0; i < array.length; i++) {\n      callback.call(scope, i, array[i]); // passes back stuff we need\n    }\n  }; // Carousel initialisation\n\n\n  var carousels = document.querySelectorAll('.tns-carousel-wrapper .tns-carousel-inner');\n  forEach(carousels, function (index, value) {\n    var controlsText;\n\n    if (value.dataset.carouselOptions != undefined && JSON.parse(value.dataset.carouselOptions).axis === 'vertical') {\n      controlsText = ['<i class=\"fi-chevron-up\"></i>', '<i class=\"fi-chevron-down\"></i>'];\n    } else {\n      controlsText = ['<i class=\"fi-chevron-left\"></i>', '<i class=\"fi-chevron-right\"></i>'];\n    }\n\n    var defaults = {\n      container: value,\n      controlsText: controlsText,\n      navPosition: 'bottom',\n      mouseDrag: true,\n      speed: 500,\n      autoplayHoverPause: true,\n      autoplayButtonOutput: false\n    };\n    var userOptions;\n    if (value.dataset.carouselOptions != undefined) userOptions = JSON.parse(value.dataset.carouselOptions);\n    var options = Object.assign({}, defaults, userOptions);\n    var carousel = tns(options);\n    var carouselWrapper = value.closest('.tns-carousel-wrapper'),\n        carouselItems = carouselWrapper.querySelectorAll('.tns-item'),\n        carouselInfo = carousel.getInfo(),\n        carouselCurrentSlide = carouselWrapper.querySelector('.tns-current-slide'),\n        carouselTotalSlides = carouselWrapper.querySelector('.tns-total-slides'); // Center slide\n\n    if (carouselWrapper.classList.contains('tns-center')) {\n      var indexCurrentInitial = carouselInfo.index;\n      carouselInfo.slideItems[indexCurrentInitial].classList.add('active');\n      carousel.events.on('indexChanged', function () {\n        var info = carousel.getInfo(),\n            indexPrev = info.indexCached,\n            indexCurrent = info.index;\n        info.slideItems[indexPrev].classList.remove('active');\n        info.slideItems[indexCurrent].classList.add('active');\n      });\n    } // Slides count\n\n\n    if (carouselWrapper.querySelector('.tns-slides-count') === null) return;\n    carouselCurrentSlide.innerHTML = carouselInfo.displayIndex;\n    carouselTotalSlides.innerHTML = carouselInfo.slideCount;\n    carousel.events.on('indexChanged', function () {\n      var info = carousel.getInfo();\n      carouselCurrentSlide.innerHTML = info.displayIndex;\n    });\n  });\n});\n$(document).on('click', '.set-country', function (event) {\n  var name = $(this).data('name');\n  var code = $(this).data('code');\n  var url = base_url + '/switch-currency/' + code + '/' + name;\n  $.ajax({\n    url: url,\n    type: \"GET\",\n    complete: function complete(response) {\n      location.reload();\n    }\n  });\n});\n$(document).ready(function () {\n  //clear fields\n\n  /*My Orders Datatable listing*/\n  if ($('#myOrdersDatatable').length) {\n    var url = $('#myOrdersDatatable').data('ajax-url');\n    $('#myOrdersDatatable').DataTable({\n      responsive: true,\n      serverSide: true,\n      ajax: {\n        url: url,\n        data: function data(d) {\n          d.search = $('input[type=\"search\"]').val();\n        }\n      },\n      columns: [{\n        data: 'invoice_id',\n        name: 'invoice_id'\n      }, {\n        data: 'order_date',\n        name: 'order_date'\n      }, {\n        data: 'status',\n        name: 'status'\n      }, {\n        data: 'action',\n        name: 'action',\n        bSortable: false\n      }]\n    });\n  }\n\n  if ($('#clientStateId').length) {\n    // alert($(this).attr('data-state'));\n    var state = $('#clientStateId').data('state');\n    var exists = false;\n    $('#userProfileStateSelect  option').each(function () {\n      if (this.value == state) {\n        exists = true;\n      }\n    });\n\n    if (!exists) {\n      var newOption = new Option(state, state, true, true);\n      $('#userProfileStateSelect').append(newOption).trigger('change');\n    }\n  }\n\n  if ($('#viewType').length) {\n    setView($(this).val());\n  }\n\n  frontCommon();\n\n  var tostrMessage = function tostrMessage(type, message) {\n    toastr.options = {\n      closeButton: true,\n      progressBar: true,\n      showMethod: 'slideDown' // timeOut: 4000\n\n    };\n\n    if (type != '' && message != '') {\n      if (type == 'success') {\n        toastr.success(message);\n      } else {\n        toastr.error(message);\n      }\n    }\n  };\n  /*Step one form*/\n\n\n  $(\"form[id='stepOneForm']\").validate({\n    rules: {\n      category: \"required\",\n      boat_condition: {\n        required: true\n      },\n      year: \"required\",\n      brand: \"required\",\n      brand_model: \"required\",\n      length: {\n        required: true,\n        min: 10\n      },\n      beam: {\n        min: 10\n      },\n      draft: {\n        required: true,\n        min: 2\n      },\n      bridge_clearance: {\n        min: 2\n      },\n      price: \"required\",\n      price_currency: \"required\"\n    },\n    errorElement: \"span\",\n    errorPlacement: function errorPlacement(error, element) {\n      if (element.attr(\"name\") == \"brand_model\") {\n        error.appendTo('.brand_model-error');\n      } else {\n        error.insertAfter(element);\n      }\n    },\n    messages: {\n      category: \"Category is required\",\n      boat_condition: {\n        required: \"Boat condition is required\"\n      },\n      year: \"Year is required\",\n      brand: \"Make is required\",\n      brand_model: \"Model is required\",\n      length: {\n        required: \"Length field is required\"\n      },\n      draft: {\n        required: \"Draft field is required\"\n      },\n      price: \"Asking Price field is required\",\n      price_currency: \"Currency is required\"\n    },\n    submitHandler: function submitHandler(form) {\n      form.submit();\n    }\n  });\n  /*Step Three form*/\n\n  $(\"form[id='stepThreeForm']\").validate({\n    errorElement: \"span\",\n    rules: {\n      general_description: {\n        required: true\n      }\n    },\n    ignore: \"hidden:not(.summernote),.note-editable.card-block\",\n    errorPlacement: function errorPlacement(error, element) {\n      if (element.attr(\"name\") == \"general_description\") {\n        error.appendTo('.general_description-error');\n      } else {\n        error.insertAfter(element);\n      }\n    },\n    messages: {\n      general_description: {\n        required: \"General Description is required\"\n      }\n    },\n    submitHandler: function submitHandler(form) {\n      form.submit();\n    }\n  });\n  $('form[id=\"stepThreeForm\"]').submit(function (e) {\n    e.preventDefault();\n    $('form[id=\"stepThreeForm\"]').valid();\n  });\n  /*Step Four form*/\n\n  $(\"form[id='stepFourForm']\").validate({\n    errorElement: \"span\",\n    rules: {\n      image: {\n        required: true\n      },\n      country: {\n        required: true\n      },\n      state: {\n        required: true\n      },\n      zip_code: {\n        required: true\n      }\n    },\n    errorPlacement: function errorPlacement(error, element) {\n      if (element.attr(\"name\") == \"image\") {\n        setTimeout(function () {\n          error.appendTo('.image-error');\n        }, 1);\n      } else {\n        error.insertBefore('.videos-warning');\n      }\n\n      console.log('element');\n      console.log(element);\n\n      if (element.attr(\"name\") == \"state\") {\n        error.appendTo('.state-error');\n      } else {\n        error.insertAfter(element);\n      }\n\n      if (element.attr(\"name\") == \"zip_code\") {\n        var country = $('#Country').val();\n\n        if (country == 'United States') {\n          if (element.length == 5) {\n            return true;\n          }\n        } else {\n          if (element.length <= 8 && element.length > 0) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n      }\n    },\n    messages: {\n      image: {\n        required: \"Atleast 1 image is required\"\n      },\n      country: {\n        required: \"Country is required\"\n      },\n      state: {\n        required: \"State is required\"\n      },\n      zip_code: {\n        required: \"Zip Code is required\"\n      }\n    },\n    submitHandler: function submitHandler(form) {\n      form.submit();\n    }\n  });\n  /*Login form*/\n\n  $(\"form[id='loginForm']\").validate({\n    rules: {\n      email: \"required\",\n      password: \"required\",\n      is_sell_boat: \"nullable\"\n    },\n    errorElement: \"span\",\n    messages: {\n      email: {\n        required: \"Email is required\"\n      },\n      password: {\n        required: \"Password is required\"\n      }\n    },\n    submitHandler: function submitHandler(form) {\n      $.ajax({\n        type: 'POST',\n        url: base_url + '/login',\n        data: {\n          email: form.email.value,\n          password: form.password.value,\n          is_sell_boat: form.is_sell_boat.value\n        },\n        beforeSend: function beforeSend() {\n          if ($('#loader').hasClass(\"d-none\")) {\n            $('#loader').removeClass(\"d-none\");\n          } //$('.loginSubmit').prop('disabled', true);\n\n\n          if (!$('#loginSubmit').hasClass(\"disabled\")) {\n            $('#loginSubmit').addClass(\"disabled\");\n          }\n        },\n        success: function success(response) {\n          if (response.success == true) {\n            window.location.href = response.redirect_url;\n          } else if (response.success == false) {\n            tostrMessage('error', response.message);\n          }\n\n          $('#signInModal').modal('hide'); // location.reload();\n        },\n        error: function error(reject) {\n          if (reject.status === 422) {\n            var errors = $.parseJSON(reject.responseText);\n            $.each(errors.errors, function (key, val) {\n              if (key) {\n                var capitalKey = key.toLowerCase().replace(/\\b[a-z]/g, function (letter) {\n                  return letter.toUpperCase();\n                });\n                var id = '#signin' + capitalKey;\n\n                if (!$(id).hasClass(\"is-invalid\")) {\n                  $(id).addClass(\"is-invalid\");\n                }\n\n                $(\".\" + key + \"_error\").text(val);\n              }\n            });\n          }\n        },\n        complete: function complete() {\n          if ($('#loginSubmit').hasClass(\"disabled\")) {\n            $('#loginSubmit').removeClass(\"disabled\");\n          }\n\n          if (!$('#loader').hasClass(\"d-none\")) {\n            $('#loader').addClass(\"d-none\");\n          }\n        }\n      });\n    }\n  });\n  /*Login form*/\n\n  $(\"form[id='signupForm']\").validate({\n    rules: {\n      first_name: \"required\",\n      last_name: \"required\",\n      contact_number: {\n        required: false,\n        minlength: 6\n      },\n      email: \"required\",\n      password: {\n        required: true,\n        minlength: 8\n      },\n      password_confirmation: {\n        required: true,\n        equalTo: \"#signupPassword\"\n      }\n    },\n    errorElement: \"span\",\n    messages: {\n      first_name: {\n        required: \"First name is required\"\n      },\n      last_name: {\n        required: \"Last name is required\"\n      },\n      email: {\n        required: \"Email is required\"\n      },\n      password: {\n        required: \"Password is required\"\n      },\n      password_confirmation: {\n        required: \"Password confirmation is required\",\n        equalTo: \"Password confirm must be equal to password\"\n      }\n    },\n    submitHandler: function submitHandler(form) {\n      $.ajax({\n        type: 'POST',\n        url: base_url + '/register',\n        data: {\n          first_name: form.first_name.value,\n          last_name: form.last_name.value,\n          contact_number: form.contact_number.value,\n          email: form.email.value,\n          password: form.password.value,\n          password_confirmation: form.password_confirmation.value\n        },\n        beforeSend: function beforeSend() {\n          if ($('#loader').hasClass(\"d-none\")) {\n            $('#loader').removeClass(\"d-none\");\n          } //$('#signupSubmit').prop('disabled', true);\n\n\n          if (!$('#signupSubmit').hasClass(\"disabled\")) {\n            $('#signupSubmit').addClass(\"disabled\");\n          }\n        },\n        success: function success(response) {\n          if (!$('#loader').hasClass(\"d-none\")) {\n            $('#loader').addClass(\"d-none\");\n          }\n\n          window.location.href = base_url;\n        },\n        error: function error(reject) {\n          if (reject.status === 422) {\n            var errors = $.parseJSON(reject.responseText);\n            $.each(errors.errors, function (key, val) {\n              if (key) {\n                var classString = key.replace('_', '-');\n                var className = '.signup-' + classString;\n\n                if (!$(className).hasClass(\"is-invalid\")) {\n                  $(className).addClass(\"is-invalid\");\n                }\n\n                $(\".\" + key + \"_error\").text(val);\n              }\n            });\n          }\n        },\n        complete: function complete() {\n          if ($('#signupSubmit').hasClass(\"disabled\")) {\n            $('#signupSubmit').removeClass(\"disabled\");\n          }\n\n          if (!$('#loader').hasClass(\"d-none\")) {\n            $('#loader').addClass(\"d-none\");\n          }\n        }\n      });\n    }\n  });\n  /*Login form*/\n\n  $(\"form[id='resetForm']\").validate({\n    rules: {\n      email: \"required\"\n    },\n    errorElement: \"span\",\n    messages: {\n      email: {\n        required: \"Email is required\"\n      }\n    },\n    submitHandler: function submitHandler(form) {\n      $.ajax({\n        type: 'POST',\n        url: base_url + '/password/email',\n        data: {\n          email: form.email.value\n        },\n        beforeSend: function beforeSend() {\n          if ($('#loader').hasClass(\"d-none\")) {\n            $('#loader').removeClass(\"d-none\");\n          } //$('#resetSubmit').prop('disabled', true);\n\n\n          if (!$('#resetSubmit').hasClass(\"disabled\")) {\n            $('#resetSubmit').addClass(\"disabled\");\n          }\n        },\n        success: function success(response) {\n          if (response.success == true) {\n            tostrMessage('success', response.message);\n          }\n\n          $('#resetModal').modal('hide');\n        },\n        error: function error(reject) {\n          if (reject.status === 422) {\n            var errors = $.parseJSON(reject.responseText);\n\n            if (!errors.message) {\n              $.each(errors.errors, function (key, val) {\n                if (key) {\n                  var capitalKey = key.toLowerCase().replace(/\\b[a-z]/g, function (letter) {\n                    return letter.toUpperCase();\n                  });\n                  var id = '#resetEmail' + capitalKey;\n\n                  if (!$(id).hasClass(\"is-invalid\")) {\n                    $(id).addClass(\"is-invalid\");\n                  }\n\n                  $(\".\" + key + \"_error\").text(val);\n                }\n              });\n            } else {\n              tostrMessage('error', errors.message);\n              $('#resetModal').modal('hide');\n            }\n          }\n        },\n        complete: function complete() {\n          if ($('#resetSubmit').hasClass(\"disabled\")) {\n            $('#resetSubmit').removeClass(\"disabled\");\n          }\n\n          if (!$('#loader').hasClass(\"d-none\")) {\n            $('#loader').addClass(\"d-none\");\n          }\n        }\n      });\n    }\n  });\n  $(document).on('click', '#showBlockedBoats', function (e) {\n    if ($('#showBlockedBoats:checked').val()) {\n      if ($('#liveWireBlockBoats').length) {\n        $('#liveWireBlockBoats').addClass('d-none');\n\n        if (!$('#liveWireBlockBoats').hasClass(\"d-none\")) {\n          $('#liveWireBlockBoats').addClass(\"d-none\");\n        }\n      }\n\n      if ($('.livewire-unblock-boats').length) {\n        $('.livewire-unblock-boats').removeClass('d-none');\n\n        if ($('.livewire-unblock-boats').hasClass(\"d-none\")) {\n          $('.livewire-unblock-boats').removeClass(\"d-none\");\n        }\n      }\n    } else {\n      if ($('#liveWireBlockBoats').length) {\n        if ($('#liveWireBlockBoats').hasClass(\"disabled\")) {\n          $('#liveWireBlockBoats').removeClass(\"disabled\");\n        }\n      }\n\n      if ($('.livewire-unblock-boats').length) {\n        if (!$('.livewire-unblock-boats').hasClass(\"disabled\")) {\n          $('.livewire-unblock-boats').addClass(\"disabled\");\n        }\n      }\n    }\n  }); // Once uncheck generator radio it erase all the data\n\n  $('.generator-check').change(function () {\n    if (!this.checked) {\n      $('#generator_fuel_type').val('');\n\n      if ($('#generator_fuel_type').hasClass(\"error\")) {\n        $('#generator_fuel_type').removeClass(\"error\");\n      }\n\n      $('#generator_fuel_type-error').html('');\n      $('#generator_size').val('');\n      $('#generator_size-error').html('');\n      $('#generator_hours').val('');\n      $('#generator_hours-error').html('');\n    }\n  }); // Once uncheck cabin radio it erase all the data\n\n  $('.cabin-check').change(function () {\n    if (!this.checked) {\n      $('#berths').val('');\n      $('#berths-error').html('');\n      $('.cabin_description-error').html('');\n      $('#cabinDescription').summernote('reset');\n    }\n  }); // Once uncheck galary radio it erase all the data\n\n  $('.galley-check').change(function () {\n    if (!this.checked) {\n      $('#galleyDescription').summernote('reset');\n      $('.galley_description-error').html('');\n    }\n  });\n  $(\".character-link\").on('click', function () {\n    var id = $(this).data('character');\n\n    if (id) {\n      $('html, body').animate({\n        'scrollTop': $(\"#\" + id + \"\").position().top\n      }, 1000);\n    }\n  });\n\n  if ($('#stepFourForm').length) {\n    //Form is present\n    var min = 0;\n    var max = 8;\n\n    if ($('#Country').val() == 'United States') {\n      //if united states selected\n      var min = 5;\n      var max = 5;\n    }\n\n    $(\"input[name*=zip_code]\").rules('add', {\n      minlength: min,\n      maxlength: max,\n      messages: {\n        required: \"Zip Code is required \"\n      }\n    });\n  } //Below functionality to hide filter\n\n\n  if (!$('#filterForm').length) {\n    $('#filterButton').addClass(\"d-none\");\n  }\n  /*Multiple Select checkbox dropdown*/\n\n\n  var select = $('.boat-type-multiple');\n\n  function formatSelection(state) {\n    return state.text;\n  }\n\n  function formatResult(state) {\n    console.log(state);\n    if (!state.id) return state.text; // optgroup\n\n    var id = 'state' + state.id.toLowerCase();\n    var label = $('<label></label>', {\n      \"for\": id\n    }).text(state.text);\n    var checkbox = $('<input type=\"checkbox\">', {\n      id: id\n    });\n    return checkbox.add(label);\n  }\n\n  select.select2({\n    closeOnSelect: false,\n    formatResult: formatResult,\n    formatSelection: formatSelection,\n    escapeMarkup: function escapeMarkup(m) {\n      return m;\n    }\n  });\n  $('.make-multiple').select2({\n    closeOnSelect: false\n  });\n  $('.model-multiple').select2({\n    closeOnSelect: false\n  });\n\n  if ($('.catalog-livewires-card').length) {// const nativeFetch = window.fetch;\n    // window.fetch = function(...args) {\n    //   \tif($('.livewire-loading').hasClass('d-none')) {\n    // \t\t$('.livewire-loading').removeClass('d-none')\n    // \t}\n    // \treturn nativeFetch.apply(window, args);\n    // }\n    // function hideLoader() {\n    // \tif(!$('.livewire-loading').hasClass('d-none')) {\n    // \t\t$('.livewire-loading').addClass('d-none')\n    // \t}\n    // }\n    // window.addEventListener('livewire-list-updated', event => {\n    // \treturn hideLoader();\n    // })\n    // jQuery(function($) {\n    // \t$.fn.select2.amd.require([\n    //     \t'select2/selection/single',\n    //     \t'select2/selection/placeholder',\n    //     \t'select2/selection/allowClear',\n    //     \t'select2/dropdown',\n    //     \t'select2/dropdown/search',\n    //     \t'select2/dropdown/attachBody',\n    //     \t'select2/utils'\n    //   \t], function (SingleSelection, Placeholder, AllowClear, Dropdown, DropdownSearch, AttachBody, Utils) {\n    // \tvar SelectionAdapter = Utils.Decorate(\n    //     SingleSelection,\n    //     Placeholder\n    //     );\n    //     SelectionAdapter = Utils.Decorate(\n    //       \tSelectionAdapter,\n    //       \tAllowClear\n    //     );\n    //     var DropdownAdapter = Utils.Decorate(\n    //       \tUtils.Decorate(\n    //       \t  \tDropdown,\n    //         \tDropdownSearch\n    //       \t),\n    //       \tAttachBody\n    //     );\n    // \tvar base_element = $('.make-multiple');\n    //     $(base_element).select2({\n    //     \tplaceholder: 'Select Make',\n    // \t    selectionAdapter: SelectionAdapter,\n    // \t    dropdownAdapter: DropdownAdapter,\n    // \t    allowClear: true,\n    // \t    templateResult: function (data) {\n    // \t        if (!data.id) { return data.text; }\n    // \t        var $res = $('<div></div>');\n    // \t        $res.text(data.text);\n    // \t        $res.addClass('wrap');\n    // \t        return $res;\n    // \t    },\n    // \t    templateSelection: function (data) {\n    // \t      \t\tif (!data.id) { return data.text; }\n    // \t        \tvar selected = ($(base_element).val() || []).length;\n    // \t        \tvar total = $('option', $(base_element)).length;\n    // \t        \treturn \"Selected \" + selected + \" of \" + total;\n    // \t      \t}\t\n    // \t    });\n    //     $.fn.select2.amd.require([\n    //     \t'select2/selection/single',\n    //     \t'select2/selection/placeholder',\n    //     \t'select2/selection/allowClear',\n    //     \t'select2/dropdown',\n    //     \t'select2/dropdown/search',\n    //     \t'select2/dropdown/attachBody',\n    //     \t'select2/utils'\n    //   \t], function (SingleSelection, Placeholder, AllowClear, Dropdown, DropdownSearch, AttachBody, Utils) {\n    // \tvar SelectionAdapter2 = Utils.Decorate(\n    //     SingleSelection,\n    //     Placeholder\n    //     );\n    //     SelectionAdapter = Utils.Decorate(\n    //       \tSelectionAdapter,\n    //       \tAllowClear\n    //     );\n    //     var DropdownAdapter = Utils.Decorate(\n    //       \tUtils.Decorate(\n    //       \t  \tDropdown,\n    //         \tDropdownSearch\n    //       \t),\n    //       \tAttachBody\n    //     );\n    //     var base_element = $('.model-multiple');\n    //     $(base_element).select2({\n    //     \tplaceholder: 'Select Model',\n    // \t    selectionAdapter: SelectionAdapter2,\n    // \t    dropdownAdapter: DropdownAdapter2,\n    // \t    allowClear: true,\n    // \t    templateResult: function (data) {\n    // \t        if (!data.id) { return data.text; }\n    // \t        var $res = $('<div></div>');\n    // \t        $res.text(data.text);\n    // \t        $res.addClass('wrap');\n    // \t        return $res;\n    // \t    },\n    // \t    templateSelection: function (data) {\n    // \t      \t\tif (!data.id) { return data.text; }\n    // \t        \tvar selected = ($(base_element).val() || []).length;\n    // \t        \tvar total = $('option', $(base_element)).length;\n    // \t        \treturn \"Selected \" + selected + \" of \" + total;\n    // \t      \t}\t\n    // \t    });\n    // \t});\n    // });\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/app-scripts/front-common.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/app-scripts/front-common.js"]();
/******/ 	
/******/ })()
;